# Generated by Django 4.1.7 on 2023-07-28 13:37
from collections import defaultdict

import django.contrib.postgres.fields
from django.db import migrations, models

from accesses.models.tools import q_is_valid_access


def compute_allowed_users(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    access_model = apps.get_model('accesses', 'Access')

    perimeters_users = defaultdict(set)
    for access in access_model.objects.using(db_alias).filter(q_is_valid_access()):
        perimeters_users[access.perimeter].add(access.profile.user_id)

    print("perimeters_users count: ", len(perimeters_users))
    for perimeter, users_ids in perimeters_users.items():
        perimeter.allowed_users = list(users_ids)
        perimeter.save()


def compute_allowed_users_from_inferior_levels(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    perimeter_model = apps.get_model('accesses', 'Perimeter')
    almost_max_level = 5   # before last (max levels = 6)

    count_level_5 = 0
    for perimeter in perimeter_model.objects.using(db_alias).filter(level=almost_max_level):
        extra_users = set(uid for child in perimeter.children.all() for uid in (child.allowed_users or []))
        perimeter.allowed_users_inferior_levels = list(extra_users)
        perimeter.save()
        count_level_5 += 1

    print("count_level_5: ", count_level_5)

    for level in range(almost_max_level-1, -1, -1):
        print("level: ", level)
        c = 0
        for perimeter in perimeter_model.objects.using(db_alias).filter(level=level):
            extra_users = set(uid for child in perimeter.children.all() for uid in child.allowed_users_inferior_levels)
            perimeter.allowed_users_inferior_levels = list(extra_users)
            perimeter.save()
            c += 1
        print(f"count level {level}:", c)


# def compute_allowed_users_from_above_levels(apps, schema_editor):
#     ...


class Migration(migrations.Migration):

    dependencies = [
        ('accesses', '0005_perimeter_level'),
    ]

    operations = [
        migrations.AddField(
            model_name='perimeter',
            name='allowed_users',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), blank=True, null=True, size=None),
        ),
        migrations.AddField(
            model_name='perimeter',
            name='allowed_users_above_levels',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), blank=True, null=True, size=None),
        ),
        migrations.AddField(
            model_name='perimeter',
            name='allowed_users_inferior_levels',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), blank=True, null=True, size=None),
        ),
        migrations.RunPython(code=compute_allowed_users),
        migrations.RunPython(code=compute_allowed_users_from_inferior_levels),
        # migrations.RunPython(code=compute_allowed_users_from_above_levels)
    ]
