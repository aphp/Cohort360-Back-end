# Generated by Django 5.0.11 on 2025-02-12 14:44
import csv
import logging
from pathlib import Path

from django.conf import settings
from django.db import migrations, models

from accesses.migrations.data.orbis_roles_map import NEW_ROLES
from accesses.serializers import RoleSerializer, RightSerializer

_logger = logging.getLogger('info')

ORBIS = settings.ACCESS_SOURCES[1]


new_rights_from_orbis = [
    {
        "name": "right_read_administrative_data",
        "label": "Lecture de données administratives",
        "category": "Lecture de Données Patients",
        "is_global": False,
    },
    {
        "name": "right_read_medical_data",
        "label": "Lecture de données médicales",
        "category": "Lecture de Données Patients",
        "is_global": False,
    },
    {
        "name": "right_read_treatments_data",
        "label": "Lecture de données de soins",
        "category": "Lecture de Données Patients",
        "is_global": False,
    }
]


def delete_existing_orbis_profiles(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    profile_model = apps.get_model('accesses', 'Profile')
    deleted_count, _ = profile_model.objects.using(db_alias).filter(source=ORBIS).delete()
    _logger.info(f"Deleted {deleted_count} old profiles with source `ORBIS`")


def load_orbis_related_rights(apps, schema_editor):
    right_serializer = RightSerializer(data=new_rights_from_orbis, many=True)
    if right_serializer.is_valid():
        right_serializer.save()
    else:
        _logger.error(f"Error on loading new ORBIS related rights: {right_serializer.errors}")
        return


def erase_orbis_related_rights(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    right_model = apps.get_model('accesses', 'Right')
    deleted_count, _ = right_model.objects.using(db_alias).filter(name__in=[r['name'] for r in new_rights_from_orbis]).delete()
    _logger.info(f"Erased {deleted_count} ORBIS related rights")


def update_existing_roles_with_orbis_related_rights(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    role_model = apps.get_model('accesses', 'Role')
    for role in role_model.objects.using(db_alias).all():
        if role.right_read_patient_nominative:
            role.right_read_administrative_data = True
            role.right_read_medical_data = True
            role.right_read_treatments_data = True
            role.save()


def unset_orbis_related_rights_on_existing_roles(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    role_model = apps.get_model('accesses', 'Role')
    count_updated = role_model.objects.using(db_alias).exclude(name__in=NEW_ROLES) \
                                                      .update(right_read_administrative_data=False,
                                                              right_read_medical_data=False,
                                                              right_read_treatments_data=False)
    _logger.info(f"Set all new ORBIS related rights to False on {count_updated} existing roles")


def load_orbis_roles(apps, schema_editor):
    current_dir = Path(__file__).resolve().parent
    with open(current_dir / 'data/orbis_roles.csv', mode='r') as f:
        reader = csv.DictReader(f, delimiter=',')
        roles_data = [{key: value not in ("True", "False") and value or value == "True" or False
                       for key, value in row.items()}
                      for row in reader
                      ]
        role_serializer = RoleSerializer(data=roles_data, many=True)
        if role_serializer.is_valid():
            role_serializer.save()
        else:
            _logger.error(f"Error on loading ORBIS roles: {role_serializer.errors}")
            return


def erase_orbis_roles(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    role_model = apps.get_model('accesses', 'Role')
    deleted_count, _ = role_model.objects.using(db_alias).filter(name__in=NEW_ROLES).delete()
    _logger.info(f"Erased {deleted_count} ORBIS roles")


class Migration(migrations.Migration):

    dependencies = [
        ('accesses', '0017_delete_caresite_delete_concept_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='role',
            name='right_read_administrative_data',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='role',
            name='right_read_medical_data',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='role',
            name='right_read_treatments_data',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='role',
            name='right_read_practitioner_data',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='access',
            name='external_id',
            field=models.CharField(blank=True, null=True),
        ),
        migrations.RunPython(code=delete_existing_orbis_profiles),
        migrations.RunPython(code=load_orbis_related_rights, reverse_code=erase_orbis_related_rights),
        migrations.RunPython(code=load_orbis_roles, reverse_code=erase_orbis_roles),
        migrations.RunPython(code=update_existing_roles_with_orbis_related_rights, reverse_code=unset_orbis_related_rights_on_existing_roles),
    ]
