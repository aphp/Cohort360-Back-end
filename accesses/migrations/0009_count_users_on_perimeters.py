# Generated by Django 4.1.7 on 2023-08-22 13:13
from collections import Counter

from django.db import migrations, models

from accesses.models.tools import q_is_valid_access, q_role_impacts_lower_levels


def count_allowed_users(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    access_model = apps.get_model('accesses', 'Access')
    perimeter_model = apps.get_model('accesses', 'Perimeter')

    perimeters_ids = access_model.objects.using(db_alias).filter(q_is_valid_access())\
                                                         .distinct("profile__user_id")\
                                                         .values_list("perimeter_id", flat=True)
    counter = Counter(perimeters_ids)

    for perimeter_id, count in counter.items():
        try:
            perimeter = perimeter_model.objects.using(db_alias).get(pk=perimeter_id)
            perimeter.count_allowed_users = count
            perimeter.save()
        except perimeter_model.DoesNotExist:
            continue


def count_allowed_users_from_above_levels(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    perimeter_model = apps.get_model('accesses', 'Perimeter')
    role_model = apps.get_model('accesses', 'Role')

    roles_impacting_inferior_levels = role_model.objects.using(db_alias).filter(q_role_impacts_lower_levels())

    for perimeter in perimeter_model.objects.using(db_alias).all():
        parents_ids = perimeter.above_levels_ids and (int(i) for i in perimeter.above_levels_ids.split(",") if i) or []
        parent_perimeters = perimeter_model.objects.using(db_alias).filter(id__in=parents_ids)

        count_accesses_impacting_inferior_levels = 0
        for p in parent_perimeters:
            accesses_impacting_inferior_levels = p.accesses.all()\
                                                           .filter(role_id__in=roles_impacting_inferior_levels)
            count_accesses_impacting_inferior_levels += accesses_impacting_inferior_levels.count()
        perimeter.count_allowed_users_above_levels = count_accesses_impacting_inferior_levels
        perimeter.save()


def re_count_allowed_users_inferior_levels(perimeter):
    count = 0
    for child in perimeter.children.all():
        count += child.count_allowed_users
        count += re_count_allowed_users_inferior_levels(perimeter=child)
    perimeter.count_allowed_users_inferior_levels = count
    perimeter.save()
    return count


def count_allowed_users_from_inferior_levels(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    perimeter_model = apps.get_model('accesses', 'Perimeter')
    for perimeter in perimeter_model.objects.using(db_alias).filter(level=1):
        re_count_allowed_users_inferior_levels(perimeter)


class Migration(migrations.Migration):

    dependencies = [
        ('accesses', '0008_remove_access_end_datetime_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='perimeter',
            name='allowed_users',
        ),
        migrations.RemoveField(
            model_name='perimeter',
            name='allowed_users_above_levels',
        ),
        migrations.RemoveField(
            model_name='perimeter',
            name='allowed_users_inferior_levels',
        ),
        migrations.AddField(
            model_name='perimeter',
            name='count_allowed_users',
            field=models.IntegerField(blank=True, default=0, null=True),
        ),
        migrations.AddField(
            model_name='perimeter',
            name='count_allowed_users_above_levels',
            field=models.IntegerField(blank=True, default=0, null=True),
        ),
        migrations.AddField(
            model_name='perimeter',
            name='count_allowed_users_inferior_levels',
            field=models.IntegerField(blank=True, default=0, null=True),
        ),
        migrations.RunPython(code=count_allowed_users),
        migrations.RunPython(code=count_allowed_users_from_above_levels),
        migrations.RunPython(code=count_allowed_users_from_inferior_levels),
    ]
