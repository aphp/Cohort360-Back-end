# Generated by Django 2.2.16 on 2022-04-05 12:13
from enum import Enum
from typing import List

from django.db import migrations

from cohort.models.cohort_result import CohortResult


class JobStatus(str, Enum):
    KILLED = "killed"
    FINISHED = "finished"
    RUNNING = "running"
    STARTED = "started"
    ERROR = "error"
    UNKNOWN = "unknown"
    PENDING = "pending"


class NewJobStatus(str, Enum):
    new = "new"
    denied = "denied"
    validated = "validated"
    pending = "pending"
    started = "started"
    failed = "failed"
    cancelled = "cancelled"
    finished = "finished"
    cleaned = "cleaned"
    unknown = "unknown"


def update_status(apps, schema_editor):
    MyCohortResult = apps.get_model('cohort', 'CohortResult')
    db_alias = schema_editor.connection.alias

    old_to_new = {
        JobStatus.KILLED.value: NewJobStatus.cancelled.value,
        JobStatus.FINISHED.value: NewJobStatus.finished.value,
        JobStatus.RUNNING.value: NewJobStatus.started.value,
        JobStatus.STARTED.value: NewJobStatus.started.value,
        JobStatus.ERROR.value: NewJobStatus.failed.value,
        JobStatus.UNKNOWN.value: NewJobStatus.unknown.value,
        JobStatus.PENDING.value: NewJobStatus.pending.value,
    }

    ers: List[CohortResult] = list(
        MyCohortResult.objects.using(db_alias).all())
    to_update = list()
    for er in ers:
        if not er.new_request_job_status:
            er.new_request_job_status = old_to_new.get(
                er.request_job_status, NewJobStatus.unknown.value)
            er.request_job_status = None
            to_update.append(er)

    MyCohortResult.objects.using(db_alias)\
        .bulk_update(to_update,
                     ['new_request_job_status', 'request_job_status'])


def rollback_status(apps, schema_editor):
    MyCohortResult = apps.get_model('cohort', 'CohortResult')
    db_alias = schema_editor.connection.alias

    new_to_old = {
        NewJobStatus.cancelled.value: JobStatus.KILLED.value,
        NewJobStatus.finished.value: JobStatus.FINISHED.value,
        NewJobStatus.started.value: JobStatus.STARTED.value,
        NewJobStatus.failed.value: JobStatus.ERROR.value,
        NewJobStatus.unknown.value: JobStatus.UNKNOWN.value,
        NewJobStatus.pending.value: JobStatus.PENDING.value,
    }

    ers: List[CohortResult] = list(
        MyCohortResult.objects.using(db_alias).all())
    to_update = list()
    for er in ers:
        if not er.request_job_status:
            er.request_job_status = new_to_old.get(er.new_request_job_status,
                                                   NewJobStatus.unknown.value)
            er.new_request_job_status = None
            to_update.append(er)
    MyCohortResult.objects.using(db_alias)\
        .bulk_update(to_update,
                     ['request_job_status', 'new_request_job_status'])


class Migration(migrations.Migration):

    dependencies = [
        ('cohort', '0013_auto_20220906_1313'),
    ]

    operations = [
        migrations.RunPython(
            update_status, reverse_code=rollback_status
        ),
    ]
