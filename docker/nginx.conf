map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}


http{

    access_log /app/log/nginx/access.log combined;

    upstream {{BACK_URL_LOCAL}} {
        # fail_timeout=0 means we always retry an upstream even if it failed
        # to return a good HTTP response

        # for UNIX domain socket setups
        server unix:/tmp/gunicorn.sock fail_timeout=0;

        # for a TCP configuration
        # server 192.168.0.7:8000 fail_timeout=0;
    }

    server {
        listen 8080;

        location / {
            proxy_pass http://localhost:8000;
            proxy_set_header Host {{BACK_URL_LOCAL}};
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # websocket headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
        }
    }
}